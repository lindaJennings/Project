AWSTemplateFormatVersion: '2010-09-09'

Description: This is a template for the project AWS services

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR.

  SubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR for public subnet.

  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR for a private subnet.

  AvailabilityZone:
    Type: String
    Default: eu-west-1a
    AllowedValues:
      - eu-west-1a
      - eu-west-1b
      - eu-west-1c
    Description: EU West AWS region for Ireland.

  ClusterName:
    Type: String
    Default: MyEKSCluster

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH Keypair to login to the worker node

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: eksVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: eksInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCIDR
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: eksPublicSubnet
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: owned

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: eksPrivateSubnet
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: owned

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: eksPublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: eksPrivateRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet
          - !Ref PrivateSubnet
      Version: '1.29'

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Sub "${ClusterName}-nodegroup"
      NodeRole: !GetAtt EKSNodeGroupRole.arn
      Subnets:
        - !Ref PrivateSubnet
      ScalingConfig:
        MinSize: 1
        DesiredSize: 2
        MaxSize: 3
      InstanceTypes:
        - t2.micro
      AmiType: AL2_x86_64
      RemoteAccess:
        Ec2SshKey: !Ref KeyName

Outputs:
  VPCId:
    Value: !Ref VPC
  PublicSubnetId:
    Value: !Ref PublicSubnet
  PrivateSubnetId:
    Value: !Ref PrivateSubnet
  EKSClusterName:
    Value: !Ref EKSCluster
  EKSNodeGroupName:
    Value: !Ref EKSNodeGroup
  EKSClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint